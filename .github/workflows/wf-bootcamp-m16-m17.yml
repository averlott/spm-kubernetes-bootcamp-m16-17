name: wf-bootcamp-m16-m17
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "Docker/**"
      - "Docker-compose/**"
env:
  DockerHub_UserName: ${{ secrets.DOCKERHUB_USERNAME }}
  DockerHub_Password: ${{ secrets.DOCKERHUB_TOKEN }}
  DockerHub_RepoName: spm-openjdk-bootcamp-m14
  DockerHub_TagName: github_m16-17
  Docker_ContainerTag: m16-17
  Application_Original_Port: 3456
  Application_Expose_Port: 8001

jobs:
  bootcamp-m16-m17-job:
    runs-on: ubuntu-latest
    steps:
    
      - name: Inicio
        run: |
          docker images -a
          docker ps -a
          
      - name: Concatena variables para reutilizar las existentes y crear otras
        run: |
          echo "Docker_ContainerName=${{env.DockerHub_RepoName}}_${{env.Docker_ContainerTag}}" >> $GITHUB_ENV
      
      - name: Checkout codigo del repositorio
        uses: actions/checkout@v3

      - name: Ejecutar lint sobre el archivo dockerfile usando hadolint
        uses: hadolint/hadolint-action@v3.0.0
        with:
          dockerfile: ./Docker/Dockerfile
          failure-threshold: error

      - name: Imprimir resultado del lint realizado con hadolint
        run: |
          echo "Resultado lint realizado con hadolint: ${{ env.HADOLINT_RESULTS }}"
          
      - name: Construir imagen docker a partir de dockerfile
        run:
          docker build . -t ${{env.DockerHub_UserName}}/${{env.DockerHub_RepoName}}:${{env.DockerHub_TagName}}_${{github.run_number}}
          -f Docker/Dockerfile
          
      - name: Detecta vulnerabilidades de la imagen creada anteriormente usando Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{env.DockerHub_UserName}}/${{env.DockerHub_RepoName}}:${{env.DockerHub_TagName}}_${{github.run_number}}'
          format: 'table'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          
      - name: Ejecutar contenedor con la imagen creada anteriormente
        run:
          docker run -d --name ${{env.Docker_ContainerName}} ${{env.DockerHub_UserName}}/${{env.DockerHub_RepoName}}:${{env.DockerHub_TagName}}_${{github.run_number}}
          
      - name: Test de la aplicacion dockerizada y ejecutada en el contenedor
        run:
          docker run --network container:${{env.Docker_ContainerName}} appropriate/curl --retry 10 --retry-connrefused http://localhost:${{env.Application_Original_Port}}/

      #- name: Login en dockerhub
      #  uses: docker/login-action@v3
      #  with:
      #    username: ${{env.DockerHub_UserName}}
      #    password: ${{env.DockerHub_Password}}
          
      #- name: Push en dockerhub con la imagen docker creada anteriormente
      #  run:
      #    docker push ${{env.DockerHub_UserName}}/${{env.DockerHub_RepoName}}:${{env.DockerHub_TagName}}_${{github.run_number}}
      
      - name: Fin
        run: |
          docker images -a
          docker ps -a
